{"version":3,"file":"placeholder.js","sourceRoot":"","sources":["../src/components/placeholder.ts"],"names":[],"mappings":";;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,GAAG,EAAE,aAAa,EAAE,QAAQ,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AAGxF,sCAAsC;AAEtC,IAAa,WAAW,mBAAxB,MAAa,WAAY,SAAQ,UAAU;IAA3C;;QAGI,eAAU,GAAG,OAAO,CAAC;QAGrB,UAAK,GAAG,OAAO,CAAC;QAGhB,UAAK,GAAG,OAAO,CAAC;QAGhB,WAAM,GAAG,OAAO,CAAC;IAsDrB,CAAC;IApDG,MAAM,KAAK,MAAM;QACb,OAAO,GAAG,CAAA;;;;;;;;;0BASQ,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;;;;;;;SAOrD,CAAC;IACN,CAAC;IAED,MAAM,CAAC,WAAW,CAAC,OAAe,OAAO;QACrC,MAAM,OAAO,GAAG;;;;;oDAK4B,IAAI;oDACJ,IAAI;;SAE/C,CAAC;QACF,MAAM,MAAM,GAAG,gCAAgC,OAAO,CAAC,OAAO,CAAC,iBAAiB,EAAE,GAAG,CAAC,IAAI,CAAC;QAC3F,OAAO,MAAM,CAAC;IAClB,CAAC;IAED,yDAAyD;IACzD,MAAM;QACF,OAAO,IAAI,CAAA;;gCAEa,IAAI,CAAC,UAAU;4BACnB,IAAI,CAAC,KAAK;qBACjB,IAAI,CAAC,KAAK;sBACT,IAAI,CAAC,MAAM;;;iCAGA,IAAI,CAAC,UAAU;2BACrB,aAAW,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC;;;;SAIrD,CAAC;IACN,CAAC;CAEJ,CAAA;AA/DG;IADC,QAAQ,EAAE;+CACU;AAGrB;IADC,QAAQ,EAAE;0CACK;AAGhB;IADC,QAAQ,EAAE;0CACK;AAGhB;IADC,QAAQ,EAAE;2CACM;AAZR,WAAW;IADvB,aAAa,CAAC,eAAe,CAAC;GAClB,WAAW,CAkEvB;SAlEY,WAAW","sourcesContent":["import { LitElement, html, css, customElement, property, unsafeCSS } from 'lit-element';\n\n\n// This decorator defines the element.\n@customElement('b-placeholder')\nexport class Placeholder extends LitElement {\n\n    @property()\n    background = 'white';\n\n    @property()\n    color = 'black';\n\n    @property()\n    width = '100px';\n\n    @property()\n    height = '100px';\n\n    static get styles() {\n        return css`\n        .background {\n            padding: 0;\n            margin: 0;\n            width: 100px;\n            height: 100px;\n            border-style: solid;\n        }\n        .diag {\n            background: ${unsafeCSS(this.generateSVG(`black`))};\n            width: 100%; \n            height: 100%;\n            background-repeat:no-repeat;\n            background-position:center center;\n            background-size: 100% 100%, auto;\n        }\n        `;\n    }\n\n    static generateSVG(fill: String = `black`): String {\n        const svgData = `\n        <svg xmlns='http://www.w3.org/2000/svg'\n        version='1.1'\n        preserveAspectRatio='none'\n        viewBox='0 0 100 100'>\n        <path d='M1 0 L0 1 L99 100 L100 99' fill='${fill}'/>\n        <path d='M0 99 L99 0 L100 1 L1 100' fill='${fill}'/>\n        </svg>\n        `;\n        const svgUrl = `url(\"data:image/svg+xml;utf8,${svgData.replace(/(?:\\r\\n|\\r|\\n)/g, ' ')}\")`;\n        return svgUrl;\n    }\n\n    // Render element DOM by returning a `lit-html` template.\n    render() {\n        return html`\n        <div class=\"background\" style=\"\n            background-color: ${this.background};\n            border-color: ${this.color};\n            width: ${this.width};\n            height: ${this.height};\n            \">\n             <div class=\"diag\" style=\"\n             background-color: ${this.background};\n             background: ${Placeholder.generateSVG(this.color)};\n             \">\n             </div>\n        </div>\n        `;\n    }\n\n}"]}